package service

import (
	"gate/models"
	"gate/sys"
	"log"
	"net"
	"time"
)

type CheckService struct {
}

var size int64 = 100

func (c *CheckService) Check() {
	gateMgr := models.GateMgr(sys.DB)
	var count int64
	gateMgr.Count(&count)
	pages := count / size
	for i := 1; i <= int(pages); i++ {
		gateMgr.Reset()
		page := new(models.Page)
		page.SetSize(size)
		page.SetCurrent(int64(i))
		resultPage, err := gateMgr.SelectPage(page)
		if err != nil {
			log.Printf(err.Error())
			continue
		}
		records := resultPage.GetRecords()
		updates := c.doCheck(records.([]models.Gate))
		for _, update := range updates {
			sys.DB.Save(&update)
		}
	}
}

func (c *CheckService) doCheck(gates []models.Gate) (updates []models.Gate) {
	connectionChan := make(chan int, 10)
	endChan := make(chan interface{})
	lenOfGates := len(gates)
	updates = make([]models.Gate, 0, lenOfGates)
	index := 0
	go func() {
		for {
			select {
			case i := <-connectionChan:
				index++
				if i != -1 {
					updates = append(updates, gates[i])
				}
				if index == lenOfGates {
					endChan <- nil
				}
			}
		}
	}()
	for i, gate := range gates {
		go func(ii int, g models.Gate) {
			conn, err := net.Dial("udp", g.IP+":500")
			conn.SetDeadline(time.Now().Add(5 * time.Second))
			if err != nil {
				if g.Status == 0 {
					connectionChan <- -1
					return
				}
				gates[ii].Status = 0
				connectionChan <- ii
				return
			}
			if _, err := conn.Write(testPacketIPSecTransport()); err != nil {
				log.Fatalf(err.Error())
			}
			buf := make([]byte, 2048)
			n, err := conn.Read(buf)
			if err != nil {
				if g.Status == 0 {
					connectionChan <- -1
					return
				}
				gates[ii].Status = 0
				connectionChan <- ii
				return
			}
			if n != 204 {
				if g.Status == 0 {
					connectionChan <- -1
					return
				}
				gates[ii].Status = 0
				connectionChan <- ii
				return
			}
			if g.Status == 0 {
				gates[ii].Status = 1
				connectionChan <- ii
				return
			}
			connectionChan <- -1
		}(i, gate)
	}
	<-endChan
	return
}

func testPacketIPSecTransport() []byte {
	return []byte{
		0x1b, 0xee, 0x1d, 0x45, 0xf5, 0xdc, 0xac, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x01, 0x10, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x14, 0x0d, 0x00, 0x02, 0x04,
		0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x01, 0xf8, 0x01, 0x01, 0x00, 0x0e,
		0x03, 0x00, 0x00, 0x24, 0x01, 0x01, 0x00, 0x00, 0x80, 0x0b, 0x00, 0x01, 0x80, 0x0c, 0x0e, 0x10,
		0x80, 0x01, 0x00, 0x07, 0x80, 0x0e, 0x01, 0x00, 0x80, 0x03, 0x00, 0x01, 0x80, 0x02, 0x00, 0x04,
		0x80, 0x04, 0x00, 0x0e, 0x03, 0x00, 0x00, 0x24, 0x02, 0x01, 0x00, 0x00, 0x80, 0x0b, 0x00, 0x01,
		0x80, 0x0c, 0x0e, 0x10, 0x80, 0x01, 0x00, 0x07, 0x80, 0x0e, 0x01, 0x00, 0x80, 0x03, 0x00, 0x01,
		0x80, 0x02, 0x00, 0x02, 0x80, 0x04, 0x00, 0x0e, 0x03, 0x00, 0x00, 0x24, 0x03, 0x01, 0x00, 0x00,
		0x80, 0x0b, 0x00, 0x01, 0x80, 0x0c, 0x0e, 0x10, 0x80, 0x01, 0x00, 0x07, 0x80, 0x0e, 0x01, 0x00,
		0x80, 0x03, 0x00, 0x01, 0x80, 0x02, 0x00, 0x01, 0x80, 0x04, 0x00, 0x0e, 0x03, 0x00, 0x00, 0x24,
		0x04, 0x01, 0x00, 0x00, 0x80, 0x0b, 0x00, 0x01, 0x80, 0x0c, 0x0e, 0x10, 0x80, 0x01, 0x00, 0x07,
		0x80, 0x0e, 0x01, 0x00, 0x80, 0x03, 0x00, 0x01, 0x80, 0x02, 0x00, 0x06, 0x80, 0x04, 0x00, 0x0e,
		0x03, 0x00, 0x00, 0x24, 0x05, 0x01, 0x00, 0x00, 0x80, 0x0b, 0x00, 0x01, 0x80, 0x0c, 0x0e, 0x10,
		0x80, 0x01, 0x00, 0x07, 0x80, 0x0e, 0x01, 0x00, 0x80, 0x03, 0x00, 0x01, 0x80, 0x02, 0x00, 0x04,
		0x80, 0x04, 0x00, 0x05, 0x03, 0x00, 0x00, 0x24, 0x06, 0x01, 0x00, 0x00, 0x80, 0x0b, 0x00, 0x01,
		0x80, 0x0c, 0x0e, 0x10, 0x80, 0x01, 0x00, 0x07, 0x80, 0x0e, 0x01, 0x00, 0x80, 0x03, 0x00, 0x01,
		0x80, 0x02, 0x00, 0x02, 0x80, 0x04, 0x00, 0x05, 0x03, 0x00, 0x00, 0x24, 0x07, 0x01, 0x00, 0x00,
		0x80, 0x0b, 0x00, 0x01, 0x80, 0x0c, 0x0e, 0x10, 0x80, 0x01, 0x00, 0x07, 0x80, 0x0e, 0x01, 0x00,
		0x80, 0x03, 0x00, 0x01, 0x80, 0x02, 0x00, 0x01, 0x80, 0x04, 0x00, 0x05, 0x03, 0x00, 0x00, 0x24,
		0x08, 0x01, 0x00, 0x00, 0x80, 0x0b, 0x00, 0x01, 0x80, 0x0c, 0x0e, 0x10, 0x80, 0x01, 0x00, 0x07,
		0x80, 0x0e, 0x01, 0x00, 0x80, 0x03, 0x00, 0x01, 0x80, 0x02, 0x00, 0x04, 0x80, 0x04, 0x00, 0x02,
		0x03, 0x00, 0x00, 0x24, 0x09, 0x01, 0x00, 0x00, 0x80, 0x0b, 0x00, 0x01, 0x80, 0x0c, 0x0e, 0x10,
		0x80, 0x01, 0x00, 0x07, 0x80, 0x0e, 0x01, 0x00, 0x80, 0x03, 0x00, 0x01, 0x80, 0x02, 0x00, 0x02,
		0x80, 0x04, 0x00, 0x02, 0x03, 0x00, 0x00, 0x24, 0x0a, 0x01, 0x00, 0x00, 0x80, 0x0b, 0x00, 0x01,
		0x80, 0x0c, 0x0e, 0x10, 0x80, 0x01, 0x00, 0x07, 0x80, 0x0e, 0x01, 0x00, 0x80, 0x03, 0x00, 0x01,
		0x80, 0x02, 0x00, 0x01, 0x80, 0x04, 0x00, 0x02, 0x03, 0x00, 0x00, 0x24, 0x0b, 0x01, 0x00, 0x00,
		0x80, 0x0b, 0x00, 0x01, 0x80, 0x0c, 0x0e, 0x10, 0x80, 0x01, 0x00, 0x07, 0x80, 0x0e, 0x00, 0x80,
		0x80, 0x03, 0x00, 0x01, 0x80, 0x02, 0x00, 0x02, 0x80, 0x04, 0x00, 0x02, 0x03, 0x00, 0x00, 0x24,
		0x0c, 0x01, 0x00, 0x00, 0x80, 0x0b, 0x00, 0x01, 0x80, 0x0c, 0x0e, 0x10, 0x80, 0x01, 0x00, 0x07,
		0x80, 0x0e, 0x00, 0x80, 0x80, 0x03, 0x00, 0x01, 0x80, 0x02, 0x00, 0x01, 0x80, 0x04, 0x00, 0x02,
		0x03, 0x00, 0x00, 0x20, 0x0d, 0x01, 0x00, 0x00, 0x80, 0x0b, 0x00, 0x01, 0x80, 0x0c, 0x0e, 0x10,
		0x80, 0x01, 0x00, 0x05, 0x80, 0x03, 0x00, 0x01, 0x80, 0x02, 0x00, 0x02, 0x80, 0x04, 0x00, 0x02,
		0x00, 0x00, 0x00, 0x20, 0x0e, 0x01, 0x00, 0x00, 0x80, 0x0b, 0x00, 0x01, 0x80, 0x0c, 0x0e, 0x10,
		0x80, 0x01, 0x00, 0x05, 0x80, 0x03, 0x00, 0x01, 0x80, 0x02, 0x00, 0x01, 0x80, 0x04, 0x00, 0x02,
		0x0d, 0x00, 0x00, 0x14, 0x4a, 0x13, 0x1c, 0x81, 0x07, 0x03, 0x58, 0x45, 0x5c, 0x57, 0x28, 0xf2,
		0x0e, 0x95, 0x45, 0x2f, 0x0d, 0x00, 0x00, 0x14, 0x4d, 0xf3, 0x79, 0x28, 0xe9, 0xfc, 0x4f, 0xd1,
		0xb3, 0x26, 0x21, 0x70, 0xd5, 0x15, 0xc6, 0x62, 0x0d, 0x00, 0x00, 0x14, 0x8f, 0x8d, 0x83, 0x82,
		0x6d, 0x24, 0x6b, 0x6f, 0xc7, 0xa8, 0xa6, 0xa4, 0x28, 0xc1, 0x1d, 0xe8, 0x0d, 0x00, 0x00, 0x14,
		0x43, 0x9b, 0x59, 0xf8, 0xba, 0x67, 0x6c, 0x4c, 0x77, 0x37, 0xae, 0x22, 0xea, 0xb8, 0xf5, 0x82,
		0x0d, 0x00, 0x00, 0x14, 0x4d, 0x1e, 0x0e, 0x13, 0x6d, 0xea, 0xfa, 0x34, 0xc4, 0xf3, 0xea, 0x9f,
		0x02, 0xec, 0x72, 0x85, 0x0d, 0x00, 0x00, 0x14, 0x80, 0xd0, 0xbb, 0x3d, 0xef, 0x54, 0x56, 0x5e,
		0xe8, 0x46, 0x45, 0xd4, 0xc8, 0x5c, 0xe3, 0xee, 0x0d, 0x00, 0x00, 0x14, 0x99, 0x09, 0xb6, 0x4e,
		0xed, 0x93, 0x7c, 0x65, 0x73, 0xde, 0x52, 0xac, 0xe9, 0x52, 0xfa, 0x6b, 0x0d, 0x00, 0x00, 0x14,
		0x7d, 0x94, 0x19, 0xa6, 0x53, 0x10, 0xca, 0x6f, 0x2c, 0x17, 0x9d, 0x92, 0x15, 0x52, 0x9d, 0x56,
		0x0d, 0x00, 0x00, 0x14, 0xcd, 0x60, 0x46, 0x43, 0x35, 0xdf, 0x21, 0xf8, 0x7c, 0xfd, 0xb2, 0xfc,
		0x68, 0xb6, 0xa4, 0x48, 0x0d, 0x00, 0x00, 0x14, 0x90, 0xcb, 0x80, 0x91, 0x3e, 0xbb, 0x69, 0x6e,
		0x08, 0x63, 0x81, 0xb5, 0xec, 0x42, 0x7b, 0x1f, 0x0d, 0x00, 0x00, 0x18, 0x40, 0x48, 0xb7, 0xd5,
		0x6e, 0xbc, 0xe8, 0x85, 0x25, 0xe7, 0xde, 0x7f, 0x00, 0xd6, 0xc2, 0xd3, 0x80, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x14, 0xaf, 0xca, 0xd7, 0x13, 0x68, 0xa1, 0xf1, 0xc9, 0x6b, 0x86, 0x96, 0xfc,
		0x77, 0x57, 0x01, 0x00,
	}
}
